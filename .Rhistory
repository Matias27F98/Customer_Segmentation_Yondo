fviz_gap_stat(stat_gap)
fviz_nbclust(cluster_data[,8:50], kmeans, method = "silhouette")
fviz_gap_stat(stat_gap)
kmeans_NA <- kmeans(cluster_NAdata[,8:50], centers = 8, nstart = 20)
dfwNA$Segment <- kmeans_1$cluster
NAsegment_summary <- dfwNA %>%
group_by(Segment)%>%
summarise(n = n(),
Age = getmode(Age),
Gender = getmode(Gender),
CountryName = getmode(CountryName),
PlanName = getmode(PlanName),
Industry = getmode(Industry),
AlreadySelling = getmode(AlreadySelling),
Revenue = getmode(Revenue))
View(NAsegment_summary)
kmeans_1 <- kmeans(cluster_data[,8:50], centers = 8, nstart = 20)
## kmeans_1$size
### returns: 105  69 110
# adding segment to dataframe
condensed_df$Segment <- kmeans_1$cluster
## summarizing segments
segment_summary <- condensed_df %>%
group_by(Segment)%>%
summarise(n = n(),
Age = getmode(Age),
Gender = getmode(Gender),
CountryName = getmode(CountryName),
PlanName = getmode(PlanName),
Industry = getmode(Industry),
AlreadySelling = getmode(AlreadySelling),
Revenue = getmode(Revenue))
install.packages("gplots")
library(gplots)
heatmap.2(dfwNA, Rowv = as.dendrogram(kmeans_NA$cluster), Colv = NA,
col = colorpanel(100, "blue", "white", "red"))
library(ggplot2)
install.packages("ggfortify")
library(ggfortify)
autoplot(kmeans_1, data = dfwNA, frame = TRUE, shape = TRUE, color = TRUE) + ggtitle("K-means Clustering")
install.packages("vcd")
library(vcd)
mosaic(dfwNA, shade = TRUE, direction = c("v", "h"), color = kmeans_NA$cluster)
library(gplots)
dfwNA_reorder <- dfwNA[order(kmeans_NA$cluster),]
View(dfwNA_reorder)
heatmap(dfwNA_reorder, col = colorpanel(100, "blue", "white", "red"))
dfwNA_reorder <- as.matrix(dfwNA_reorder[,-1])
heatmap(dfwNA_reorder, col = colorpanel(100, "blue", "white", "red"))
dfwNA_reorder <- as.matrix(dfwNA_reorder[,-1])
dfwNA_reorder <- as.matrix.data.frame(dfwNA_reorder[,-1])
heatmap(dfwNA_reorder, col = colorpanel(100, "blue", "white", "red"))
library(MASS)
mosaic(NAsegment_summary, shade = TRUE, direction = c("v", "h"), color = TRUE, main = "Mosaic plot for NAsegment_summary")
NAsegment_summary_df <- as.data.frame(NAsegment_summary)
mosaic(NAsegment_summary_df, shade = TRUE, direction = c("v", "h"), color = TRUE, main = "Mosaic plot for NAsegment_summary")
View(df)
library(ggplot2)
ggplot(NAsegment_summary, aes(x = Segment, y = n, fill = Age)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent) +
ggtitle("Count of observations by Segment and Age")
library(kableExtra)
NAsegment_summary %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
group_rows("Segment", 1) %>%
add_footnote("*n: Number of observations") %>%
facet_wrap(~ CountryName+Gender+PlanName+Industry+AlreadySelling+Revenue, ncol = 1)
NAsegment_summary %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
group_rows("Segment", 1) %>%
add_footnote("*n: Number of observations") %>%
facet_wrap(~ CountryName+Gender+PlanName+Industry+AlreadySelling+Revenue, ncol = 1)
NAsegment_summary %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
group_rows("Segment", 10) %>%
add_footnote("*n: Number of observations") %>%
facet_wrap(~ CountryName+Gender+PlanName+Industry+AlreadySelling+Revenue, ncol = 1)
NAsegment_summary %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_footnote("*n: Number of observations") %>%
facet_wrap(~ CountryName+Gender+PlanName+Industry+AlreadySelling+Revenue, ncol = 1)
NAsegment_summary %>%
kable() %>%
kable_styling(bootstrap_options = "striped", full_width = F) %>%
add_footnote("*n: Number of observations") %>%
facet_wrap(~ Segment, ncol = 1)
library(tidyverse)
library(skimr)
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
# we have a lot of variables and missing data
skim(df)
# turining most important variables into factors
glimpse(df)
df <- df %>%
mutate(Age = as.factor(Age),
Gender = as.factor(Gender),
Industry = as.factor(Industry),
CountryName = as.factor(CountryName),
SignUpType = as.factor(SignUpType),
SubscriptionStatus = as.factor(SubscriptionStatus),
PlanName = as.factor(PlanName),
AlreadySelling = as.factor(AlreadySelling),
Revenue = as.factor(Revenue))
# summary
df %>%
select(where(is.factor))%>%
summary.data.frame()
## Recoding overlaping age categories
unique(df$Age)
df$Age <- replace(df$Age, df$Age == "45-55", "45-54")
df$Age <- replace(df$Age, df$Age == "44-45", "45-54")
df$Age <- replace(df$Age, df$Age == "44-55", "45-54")
df$Age <- replace(df$Age, df$Age == "34-45", "35-44")
df$Age <- replace(df$Age, df$Age == "54-65", "55-64")
# recoding wrong PlanName as NA
df$PlanName <- replace(df$PlanName, df$PlanName == "/", NA)
# summary
df %>%
select(where(is.factor))%>%
summary.data.frame()
# exploring most relevant descriptors of costumers
df$Industry <- as.factor(df$Industry)
df$Gender <- as.factor(df$Gender)
#maybe I don't need these graphs
df %>%
ggplot(aes(Industry, fill = Industry)) +
geom_bar() +
theme(axis.text.x = element_blank())
df %>%
ggplot(aes(Gender, fill = Gender)) +
geom_bar() +
theme(axis.text.x = element_blank())
df %>%
ggplot(aes(Age, fill = Age)) +
geom_bar() +
theme(axis.text.x = element_blank())
factors <- sapply(df, is.factor)
factor_vars <- names(factors[factors == TRUE])
plots_list <- list()
for (i in 1:length(factor_vars)) {
plots_list[[i]] <- ggplot(df, aes_string(factor_vars[i], fill = factor_vars[i])) +
geom_bar() +
theme(axis.text.x = element_blank())
}
# id on't like how this is coming out but we could use it later
library(ggpubr)
ggarrange(plotlist = plots_list, ncol = 3)
## do a grid arrange? for the general ones?
df %>%
ggplot(aes(AlreadySelling, fill = AlreadySelling)) +
geom_bar() +
facet_wrap(df$Gender)+
theme(axis.text.x = element_blank())
## this one below might be better than the last one w facet wrap
df %>%
ggplot(aes(Gender, fill = Industry)) +
geom_bar()
# these two are super important
df %>%
ggplot(aes(AlreadySelling, fill = AlreadySelling)) +
geom_bar() +
facet_grid(df$Revenue~df$Industry) +
theme(axis.text.x = element_blank())
df %>%
ggplot(aes(AlreadySelling, fill = AlreadySelling)) +
geom_bar() +
facet_grid(df$Industry~df$PlanName) +
theme(axis.text.x = element_blank())
# this is useful too
condensed_df <- df%>%
select(Age, Gender, CountryName,
PlanName, Industry, AlreadySelling, Revenue)
# Replacing NA rows with mode
# Creating a User defined function for finding Mode as R does not come with a base mode function
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Replacing categorical variable NAs with their mode and continuous variable NAs with Mean
## mode is actually NA, so we need to create a list without it to recall the real mode
AgeMode <- as.factor(condensed_df$Age) %>%
na.omit()
condensed_df %>%
filter(!complete.cases(.))
condensed_df$Age <- replace_na(condensed_df$Age, getmode(AgeMode))
condensed_df$Gender <- replace_na(condensed_df$Gender, getmode(condensed_df$Gender))
condensed_df$Industry <- replace_na(condensed_df$Industry, getmode(condensed_df$Industry))
condensed_df$AlreadySelling <- replace_na(condensed_df$AlreadySelling, getmode(condensed_df$AlreadySelling))
condensed_df$Revenue <- replace_na(condensed_df$Revenue, getmode(condensed_df$Revenue))
glimpse(condensed_df)
condensed_df <- condensed_df %>%
mutate_if(is.character, as.factor)
# One Hot encoding categorical variables
library(fastDummies)
cluster_data<-dummy_cols(condensed_df)
## clustering
library(ClusterR)
library(cluster)
#set seed
set.seed(123)
## determining ideal number of clusters
library(NbClust)
library(factoextra)
fviz_nbclust(cluster_data[,8:50], kmeans, method = "silhouette")
fviz_nbclust(cluster_data[,8:50], kmeans, method = "wss")
stat_gap <- clusGap(cluster_data[,8:50], FUN = kmeans, nstart = 30,K.max = 10, B = 100)
fviz_gap_stat(stat_gap)
## 10 clusters feels excessive.
## 8 seems to have an almost equal fit. to keep things more parsimoniuous we'll keep it at 8
### maybe let's stick with 3??
kmeans_1 <- kmeans(cluster_data[,8:50], centers = 8, nstart = 20)
## kmeans_1$size
### returns: 105  69 110
# adding segment to dataframe
condensed_df$Segment <- kmeans_1$cluster
## summarizing segments
segment_summary <- condensed_df %>%
group_by(Segment)%>%
summarise(n = n(),
Age = getmode(Age),
Gender = getmode(Gender),
CountryName = getmode(CountryName),
PlanName = getmode(PlanName),
Industry = getmode(Industry),
AlreadySelling = getmode(AlreadySelling),
Revenue = getmode(Revenue))
## with NA stuff
dfwNA <- df %>%
select(Age, Gender, CountryName,
PlanName, Industry, AlreadySelling, Revenue)
## k means clustering doesn't work with NA values
library(DMwR2)
# Instead of specifying "NA" as a valid factor level for every variable, we'll just make everything into character variables
## it won't matter since we are one hot encoding everything anyway for k clustering
dfwNA <- dfwNA%>%
mutate_if(is.factor, as.character)
dfwNA <- na.replace(dfwNA, replace = "NA")
cluster_NAdata<-dummy_cols(dfwNA)
kmeans_NA <- kmeans(cluster_NAdata[,8:50], centers = 8, nstart = 20)
dfwNA$Segment <- kmeans_1$cluster
NAsegment_summary <- dfwNA %>%
group_by(Segment)%>%
summarise(n = n(),
Age = getmode(Age),
Gender = getmode(Gender),
CountryName = getmode(CountryName),
PlanName = getmode(PlanName),
Industry = getmode(Industry),
AlreadySelling = getmode(AlreadySelling),
Revenue = getmode(Revenue))
setwd("~/Desktop/Market Research - Training /Market Research")
setwd("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research")
library(tidyverse)
library(skimr)
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
skim(df)
glimpse(df)
df <- df %>%
mutate(Age = as.factor(Age),
Gender = as.factor(Gender),
Industry = as.factor(Industry),
CountryName = as.factor(CountryName),
SignUpType = as.factor(SignUpType),
SubscriptionStatus = as.factor(SubscriptionStatus),
PlanName = as.factor(PlanName),
AlreadySelling = as.factor(AlreadySelling),
Revenue = as.factor(Revenue))
# summary
df %>%
select(where(is.factor))%>%
summary.data.frame()
unique(df$Age)
df$Age <- replace(df$Age, df$Age == "45-55", "45-54")
df$Age <- replace(df$Age, df$Age == "44-45", "45-54")
df$Age <- replace(df$Age, df$Age == "44-55", "45-54")
df$Age <- replace(df$Age, df$Age == "34-45", "35-44")
df$Age <- replace(df$Age, df$Age == "54-65", "55-64")
df$PlanName <- replace(df$PlanName, df$PlanName == "/", NA)
df %>%
select(where(is.factor))%>%
summary.data.frame()
df$Industry <- as.factor(df$Industry)
df$Gender <- as.factor(df$Gender)
df$Industry <- as.factor(df$Industry)
df$Gender <- as.factor(df$Gender)
factors <- sapply(df, is.factor)
factor_vars <- names(factors[factors == TRUE])
plots_list <- list()
for (i in 1:length(factor_vars)) {
plots_list[[i]] <- ggplot(df, aes_string(factor_vars[i], fill = factor_vars[i])) +
geom_bar() +
theme(axis.text.x = element_blank())
}
plots_list <- list()
for (i in 1:length(factor_vars)) {
plots_list[[i]] <- ggplot(df, aes(factor_vars[i], fill = factor_vars[i])) +
geom_bar() +
theme(axis.text.x = element_blank())
}
plots_list
View(plots_list)
print(plots_list)
print(plots_list[[1]])
print(plots_list[[2]])
View(df)
factors <- sapply(df, is.factor)
factor_vars <- names(factors[factors == TRUE])
for (i in 1:length(factor_vars)) {
plots_list[[i]] <- ggplot(df, aes(factor_vars[i], fill = factor_vars[i])) +
geom_bar() +
theme(axis.text.x = element_blank())
}
print(plots_list[[6]])
library(tidyverse)
library(skimr)
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
# we have a lot of variables and missing data
skim(df)
# turining most important variables into factors
glimpse(df)
df <- df %>%
mutate(Age = as.factor(Age),
Gender = as.factor(Gender),
Industry = as.factor(Industry),
CountryName = as.factor(CountryName),
SignUpType = as.factor(SignUpType),
SubscriptionStatus = as.factor(SubscriptionStatus),
PlanName = as.factor(PlanName),
AlreadySelling = as.factor(AlreadySelling),
Revenue = as.factor(Revenue))
# summary
df %>%
select(where(is.factor))%>%
summary.data.frame()
## Recoding overlaping age categories
unique(df$Age)
df$Age <- replace(df$Age, df$Age == "45-55", "45-54")
df$Age <- replace(df$Age, df$Age == "44-45", "45-54")
df$Age <- replace(df$Age, df$Age == "44-55", "45-54")
df$Age <- replace(df$Age, df$Age == "34-45", "35-44")
df$Age <- replace(df$Age, df$Age == "54-65", "55-64")
# recoding wrong PlanName as NA
df$PlanName <- replace(df$PlanName, df$PlanName == "/", NA)
# summary
df %>%
select(where(is.factor))%>%
summary.data.frame()
# exploring most relevant descriptors of costumers
## graphing factor variables as barcharts with a loop
df$Industry <- as.factor(df$Industry)
df$Gender <- as.factor(df$Gender)
factors <- sapply(df, is.factor)
factor_vars <- names(factors[factors == TRUE])
plots_list <- list()
for (i in 1:length(factor_vars)) {
plots_list[[i]] <- ggplot(df, aes_string(factor_vars[i], fill = factor_vars[i])) +
geom_bar() +
theme(axis.text.x = element_blank())
}
plots_list
print(plots_list)
ggarrange(plotlist = plots_list, ncol = 3)
View(df)
skim(df)
unique(df$CreatedDate)
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
unique(df$CreatedDate)
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
unique(df$CreatedDate)
dates <- df$CreatedDate
date_format1 <- dates[grep("/", dates)]
date_format1
date_format2 <- dates[!grep("/", dates)]
date_format2
date_format1
dates
date_format2 <- dates[grep("/", dates, invert = TRUE)]
date_format2
library(lubridate)
date_objects <- lapply(date_format1, dmy_hm)
View(date_objects)
date_objects <- c(date_objects, lapply(date_format2, dmy_hms))
df$CreatedDate_clean <- date_objects[match(df$CreatedDate, date_objects)]
View(date_objects)
dates
df <- df %>%
select(CreatedDate_clean) %>%
select_after(3)
df1 <- df %>%
select(names(df)[1:3], CreatedDate_clean, names(df)[5:ncol(df)])
View(df1)
for (i in 1:length(dates)) {
date_object <- tryCatch(dmy_hm(dates[i]),
error = function(e) tryCatch(dmy_hms(dates[i]),
error = function(e) return(NA)))
df$CreatedDate_clean[i] <- date_object
}
View(df)
df$CreatedDate_clean <- date_objects
df$CreatedDate_clean <- as.POSIXct.POSIXlt(date_objects)
df$CreatedDate_clean <- as.POSIXct(date_objects)
df$CreatedDate_clean <- as.POSIXct.Date(date_objects)
df$CreatedDate_clean <- as.POSIXct.POSIXlt(date_objects)
df$CreatedDate_clean <- as.POSIXct.Date(df$CreatedDate_clean)
date_objects
View(date_objects)
df$CreatedDate_clean <- as.POSIXct.numeric(date_objects)
df$CreatedDate_clean <- as.character.Date(date_objects)
df$CreatedDate_clean <- as.POSIXct.Date(df$CreatedDate_clean)
df$CreatedDate_clean <- as.POSIXct(df$CreatedDate_clean)
df$CreatedDate_clean <- as.POSIXct.default(df$CreatedDate_clean)
for (i in 1:length(dates)) {
date_object <- tryCatch(dmy_hm(dates[i]),
error = function(e) tryCatch(dmy_hms(dates[i]),
error = function(e) return(NA)))
df$CreatedDate_clean[i] <- date_object
}
date_objects
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, lapply(date_format2, dmy_hms))
date_objects <- lapply(date_format1, dmy_hm)
View(date_objects)
date_objects <- c(date_objects, lapply(date_format2, dmy_hms))
date_format2
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x, format = "%dd/%mmm/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
for (i in 1:length(dates)) {
date_object <- tryCatch(dmy_hm(dates[i]),
error = function(e) tryCatch(as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")),
error = function(e) return(NA))
df$CreatedDate_clean[i] <- date_object
df$CreatedDate_clean <- date_objects[match(df$CreatedDate, date_objects)]
date_objects
date_objects <- lapply(date_format1, dmy_hm)
date_objects
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
date_objects
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x = date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
date_objects <- lapply(date_format2, as.POSIXct(strptime(x = date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss")))
df <- read.csv("/Users/matiasfonolla/Desktop/Market Research - Training /Market Research/Yondo.xlsx - QUERY_FOR_YONDOFINAL.csv",
na.strings = "")
dates <- df$CreatedDate
dates
date_format1 <- dates[grep("/", dates)]
date_format1
date_format2 <- dates[grep("/", dates, invert = TRUE)]
date_format2
date_objects <- lapply(date_format1, dmy_hm)
date_objects
date_objects <- lapply(date_format2, function (x) as.POSIXct(strptime(x = date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss")))
View(date_objects)
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
View(date_objects)
for (i in 1:length(dates)) {
date_object <- tryCatch(dmy_hm(dates[i]),
error = function(e) tryCatch(as.POSIXct(strptime(dates[i], format = "%dd/%b/%yyyy %H:%mm:%ss")),
error = function(e) return(NA)))
date_objects[i] <- date_object
}
for (i in 1:length(date_format2)) {
date_object <- as.POSIXct(strptime(dates[i], format = "%dd/%b/%yyyy %H:%mm:%ss"),
date_objects[i] <- date_object
}
for (i in 1:length(date_format2)) {
date_object <- as.POSIXct(strptime(dates[i], format = "%dd/%b/%yyyy %H:%mm:%ss")
date_objects[i] <- date_object
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, function(x){
tryCatch(as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")), error = function(e) return(NA))
})
View(date_objects)
date_objects <- c(date_format2, as.Date(, format = "%dd/%b/%yyyy %H:%mm:%ss")
date_objects
date_objects <- lapply(date_format1, dmy_hm)
date_objects <- c(date_objects, as.Date(date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss")
View(date_objects)
date_objects <- c(date_objects, as.Date(date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss"))
date_objects <- c(date_objects,as.POSIXct(strptime(x, format = "%dd/%b/%yyyy %H:%mm:%ss")))
date_objects <- c(date_objects,as.POSIXct(strptime(date_format2, format = "%dd/%b/%yyyy %H:%mm:%ss")))
date_format2
# Define the regular expression
regex <- "^(?<day>\\d{2})(?<month>\\w{3})(?<year>\\d{4}) (?<hour>\\d{2}):(?<minute>\\d{2}):(?<second>\\d{2})$"
# Define the string to be parsed
string <- "23ago2019 21:43:21"
# Use strptime() to parse the string into a date-time object
date_time <- strptime(string, regex, tz = "UTC")
# Print the result
print(date_time)
rm(regex, string, date_time)
